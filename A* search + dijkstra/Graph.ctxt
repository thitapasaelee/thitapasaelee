#BlueJ class context
comment0.target=Graph
comment0.text=\n\ Graph\ is\ the\ data\ structure\ that\ stores\ the\ collection\ of\ stops,\ lines\ and\ connections.\ \n\ The\ Graph\ constructor\ is\ passed\ a\ Map\ of\ the\ stops,\ indexed\ by\ stopId\ and\n\ \ a\ Map\ of\ the\ Lines,\ indexed\ by\ lineId.\n\ The\ Stops\ in\ the\ map\ have\ their\ id,\ name\ and\ GIS\ location.\n\ The\ Lines\ in\ the\ map\ have\ their\ id,\ and\ lists\ of\ the\ stopIDs\ an\ times\ (in\ order)\n\n\ To\ build\ the\ actual\ graph\ structure,\ it\ is\ necessary\ to\n\ \ build\ the\ list\ of\ Edges\ out\ of\ each\ stop\ and\ the\ list\ of\ Edges\ into\ each\ stop\n\ Each\ pair\ of\ adjacent\ stops\ in\ a\ Line\ is\ an\ edge.\n\ We\ also\ need\ to\ create\ walking\ edges\ between\ every\ pair\ of\ stops\ in\ the\ whole\n\ \ network\ that\ are\ closer\ than\ walkingDistance.\n
comment1.params=stops\ lines
comment1.target=Graph(java.util.Collection,\ java.util.Collection)
comment1.text=\n\ Construct\ a\ new\ graph\ given\ a\ collection\ of\ stops\ and\ a\ collection\ of\ lines.\n
comment10.params=prefix
comment10.target=java.util.List\ getAllMatchingStops(java.lang.String)
comment10.text=\ \n\ Return\ all\ the\ stops\ that\ start\ with\ the\ specified\ prefix\n\ in\ alphabetic\ order.\n
comment11.params=
comment11.target=int\ getSubGraphCount()
comment12.params=num
comment12.target=void\ setSubGraphCount(int)
comment13.params=
comment13.target=void\ resetSubGraphIds()
comment13.text=\n\ reset\ the\ subgraph\ ID\ of\ all\ stops\n
comment2.params=
comment2.target=void\ printGraphData()
comment2.text=Print\ out\ the\ lines\ and\ stops\ in\ the\ graph\ to\ System.out
comment3.params=
comment3.target=void\ createAndConnectEdges()
comment3.text=\ \n\ From\ the\ loaded\ Line\ and\ Stop\ information,\n\ \ identify\ all\ the\ edges\ that\ connect\ stops\ along\ a\ Line.\n\ -\ Construct\ the\ collection\ of\ all\ Edges\ in\ the\ graph\ \ and\n\ -\ Construct\ the\ forward\ and\ backward\ neighbour\ edges\ of\ each\ Stop.\n
comment4.params=
comment4.target=void\ computeNeighbours()
comment4.text=\ \n\ Construct\ the\ undirected\ graph\ of\ neighbours\ for\ each\ Stop\:\n\ For\ each\ Stop,\ construct\ a\ set\ of\ the\ stops\ that\ are\ its\ neighbours\n\ from\ the\ forward\ and\ backward\ neighbour\ edges.\n\ It\ may\ assume\ that\ there\ are\ no\ walking\ edges\ at\ this\ point.\n\ \n
comment5.params=walkingDistance
comment5.target=void\ recomputeWalkingEdges(double)
comment5.text=\ \n\ Reconstruct\ all\ the\ current\ walking\ edges\ in\ the\ graph,\n\ based\ on\ the\ specified\ walkingDistance\:\n\ identify\ all\ pairs\ of\ stops\ *\ that\ are\ at\ most\ walkingDistance\ apart,\n\ and\ construct\ edges\ (both\ ways)\ between\ the\ stops\n\ add\ the\ edges\ to\ the\ forward\ and\ backward\ neighbouars\ of\ the\ Stops\n\ add\ the\ edges\ to\ the\ walking\ edges\ of\ the\ graph.\n\ Assume\ that\ all\ the\ previous\ walking\ edges\ have\ been\ removed\n
comment6.params=
comment6.target=void\ removeWalkingEdges()
comment6.text=\ \n\ Remove\ all\ the\ current\ walking\ edges\ in\ the\ graph\n\ -\ from\ the\ edges\ field\ (the\ collection\ of\ all\ the\ edges\ in\ the\ graph)\n\ -\ from\ the\ forward\ and\ backward\ neighbours\ of\ each\ Stop.\n\ -\ Resets\ the\ number\ of\ components\ back\ to\ 0\ by\n\ \ \ calling\ \ resetSubGraphIds()\n
comment7.params=
comment7.target=java.util.Collection\ getStops()
comment7.text=\n\ Return\ a\ collection\ of\ all\ the\ stops\ in\ the\ network\n
comment8.params=
comment8.target=java.util.Collection\ getEdges()
comment8.text=\n\ Return\ a\ collection\ of\ all\ the\ edges\ in\ the\ network\n
comment9.params=prefix
comment9.target=Stop\ getFirstMatchingStop(java.lang.String)
comment9.text=\n\ Return\ the\ first\ stop\ that\ starts\ with\ the\ specified\ prefix\n\ (first\ by\ alphabetic\ order\ of\ name)\n
numComments=14
